What is Thread Synchronization:-when a thread is already acting on an object,prevention any other thread from acting on the same object is called 
	"Thread Syncoronization" or "Thread Safe" the object on which the thread are syncoronized is called synchronized object . Thread Synchronization is 
	recommended when multipal thread are used on the same object.
	Synchronization in java is the capability to control the access of multiple threads to any shared resource.Java Synchronization is better option where
	we want to allow only one thread to access the shared resource.
	
	Why use Synchronization:-The synchronization is mainly used to

	1. To prevent thread interference.
	2. To prevent consistency problem.
	
Types of Synchronization:-There are two types of synchronization

	1. Process Synchronization
	2. Thread Synchronization
		Here, we will discuss only thread synchronization.
		
Thread Synchronization:-There are two types of thread synchronization mutual exclusive and inter-thread communication.

	1. Mutual Exclusive
		1. Synchronized method.
		2. Synchronized block.
		3. static synchronization.
	2. Cooperation (Inter-thread communication in java)
	
Mutual Exclusive:-Mutual Exclusive helps keep threads from interfering with one another while sharing data. This can be done by three ways in java:

	1. Synchronized method.
	2. Synchronized block.
	3. static synchronization.
	
Concept of Lock:-Synchronization is built around an internal entity known as the lock or monitor. Every object has an lock associated with it. By convention,
	a threa that needs consistent access to an object's fields has to acquire the object's lock before accessing them, and then release the lock when it's
	done with them.
	
synchronized method:-If you declare any method as synchronized, it is known as synchronized method.Synchronized method is used to lock an object for any
	shared resource.When a thread invokes a synchronized method, it automatically acquires the lock for that object and releases it when the thread completes
	its task.
	
Synchronized block:-Synchronized block can be used to perform synchronization on any specific resource of the method.here we can embed group of statement of the
	object (inside run() method) within a synchronized block.here object represent the object to be locked or synchronized.the statement inside the block
	all are available to onlt ine thread at a time.
	Suppose you have 50 lines of code in your method, but you want to synchronize only 5 lines, you can use synchronized block.If you put all the codes of
	the method in the synchronized block, it will work same as the synchronized method.
	
	Points to remember for Synchronized block

	1. Synchronized block is used to lock an object for any shared resource.
	2. Scope of synchronized block is smaller than the method.
	
	synchronized (object reference expression) {   
	//code block   
	} 
	
Static synchronization:-If you make any static method as synchronized, the lock will be on the class not on object.

	Problem without static synchronization:-Suppose there are two objects of a shared class(e.g. Table) named object1 and object2.In case of synchronized 
	method and synchronized block there cannot be interference between t1 and t2 or t3 and t4 because t1 and t2 both refers to a common object that have a
	single lock.But there can be interference between t1 and t3 or t2 and t4 because t1 acquires another lock and t3 acquires another lock.I want no 
	interference between t1 and t3 or t2 and t4.Static synchronization solves this problem.
	
Deadlock :-Deadlock in java is a part of multithreading. Deadlock can occur in a situation when a thread is waiting for an object lock, that is acquired by
	another thread and second thread is waiting for an object lock that is acquired by first thread. Since, both threads are waiting for each other to 
	release the lock, the condition is called deadlock.
	
Inter-thread communication:-Inter-thread communication or Co-operation is all about allowing synchronized threads to communicate with each other.
    Cooperation (Inter-thread communication) is a mechanism in which a thread is paused running in its critical section and another thread is allowed to
	enter (or lock) in the same critical section to be executed.It is implemented by following methods of Object class:

	wait()
	notify()
	notifyAll()
	
1) wait() method:-Causes current thread to release the lock and wait until either another thread invokes the notify() method or the notifyAll() method for
		this object, or a specified amount of time has elapsed.The current thread must own this object's monitor, so it must be called from the synchronized
		method only otherwise it will throw exception.
		
	public final void wait()throws InterruptedException					waits until object is notified.
	public final void wait(long timeout)throws InterruptedException		waits for the specified amount of time.
	
2) notify() method:-Wakes up a single thread that is waiting on this object's monitor. If any threads are waiting on this object, one of them is chosen to
		be awakened. The choice is arbitrary and occurs at the discretion of the implementation. Syntax:
		public final void notify()
		
3) notifyAll() method:-Wakes up all threads that are waiting on this object's monitor. Syntax:
		public final void notifyAll()
		
	Understanding the process of inter-thread communication:-The point to point explanation of the above diagram is as follows:
	
	1. Threads enter to acquire lock.
	2. Lock is acquired by on thread.
	3. Now thread goes to waiting state if you call wait() method on the object. Otherwise it releases the lock and exits.
	4. If you call notify() or notifyAll() method, thread moves to the notified state (runnable state).
	5. Now thread is available to acquire lock.
	6. After completion of the task, thread releases the lock and exits the monitor state of the object.
	
Why wait(), notify() and notifyAll() methods are defined in Object class not Thread class?It is because they are related to lock and object has a lock.

	Difference between wait and sleep?:-
	wait()																sleep()
wait() method releases the lock										sleep() method doesn't release the lock.
wait() method is the method of Object class							sleep() method is the method of Thread class
wait() method is the non-static method								sleep() method is the static method
should be notified by notify() or notifyAll() methods	after the specified amount of time, sleep is completed.


Interrupting a Thread:-If any thread is in sleeping or waiting state (i.e. sleep() or wait() is invoked), calling the interrupt() method on the thread, breaks
	out the sleeping or waiting state throwing InterruptedException. If the thread is not in the sleeping or waiting state, calling the interrupt() method
	performs normal behaviour and doesn't interrupt the thread but sets the interrupt flag to true. Let's first see the methods provided by the Thread class
	for thread interruption.
	
	The 3 methods provided by the Thread class for interrupting a thread:-
	
	public void interrupt()
	public static boolean interrupted()
	public boolean isInterrupted()
	
	
Reentrant Monitor:-According to Sun Microsystems, Java monitors are reentrant means java thread can reuse the same monitor for different synchronized
	methods if method is called from the method.
	
	Advantage of Reentrant Monitor:-It eliminates the possibility of single thread deadlocking


